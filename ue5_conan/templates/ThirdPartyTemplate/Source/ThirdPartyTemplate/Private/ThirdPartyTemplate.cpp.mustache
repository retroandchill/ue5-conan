// Copyright Epic Games, Inc. All Rights Reserved.

#include "{{plugin_name}}.h"
#include "Misc/MessageDialog.h"
#include "Modules/ModuleManager.h"
#include "Interfaces/IPluginManager.h"
#include "Misc/Paths.h"
#include "HAL/PlatformProcess.h"

#define LOCTEXT_NAMESPACE "F{{plugin_name}}Module"

void F{{plugin_name}}Module::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module
    {{#link_shared}}

	// Get the base directory of this plugin
	FString BaseDir = IPluginManager::Get().FindPlugin("{{plugin_name}}")->GetBaseDir();

	// Add on the relative location of the third party dll and load it
    {{#shared_libraries}}
    FString LibraryPath{{index}} = FPaths::Combine(*BaseDir, TEXT("Binaries/ThirdParty/{{plugin_name}}Library/{{library_name}}"));
    {{plugin_name}}Handles[{{index}}] = !LibraryPath{{index}}.IsEmpty() ? FPlatformProcess::GetDllHandle(*LibraryPath{{index}}) : nullptr;
    {{/shared_libraries}}
    {{/link_shared}}
}

void F{{plugin_name}}Module::ShutdownModule()
{
    // This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
    {{#link_shared}}

	// Free the dll handle
    for (auto& Handle : {{plugin_name}}Handles)
    {
        if (Handle != nullptr)
        {
            FPlatformProcess::FreeDllHandle(Handle);
            Handle = nullptr;
        }
    }
    {{/link_shared}}
}

#undef LOCTEXT_NAMESPACE
	
IMPLEMENT_MODULE(F{{plugin_name}}Module, {{plugin_name}})
